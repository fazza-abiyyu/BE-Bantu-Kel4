// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  FREELANCER
}

model Perusahaan {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  nama_perusahaan   String
  gambar_perusahaan String
  alamat            String?
  no_telepon        String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String?
  role        Role         @default(USER)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  user_profile UserProfile[]
  refresh_token RefreshToken[]
  log Log[]
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  profile_picture String?
  full_name       String
  phone_number    String?  @unique
  city           String?
  country        String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_id         Int      @unique
  user           User     @relation(fields: [user_id], references: [id])
}

model Log {
  id          Int      @id @unique @default(autoincrement())
  user_id     Int
  action      Action
  description String
  create_at   DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Action {
  LOGOUT
  LOGIN
  CREATE
  UPDATE
  DELETE
}

model RefreshToken {
  id            Int      @id @unique @default(autoincrement())
  user_id       Int
  refresh_token String
  create_at     DateTime @default(now())
  update_at     DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
